from typing import Annotated
from langchain.agents import AgentExecutor, create_openai_tools_agent
from langchain_openai import AzureChatOpenAI
from langgraph.graph import StateGraph, START, END
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from elasticsearch import Elasticsearch
from dotenv import load_dotenv
import json
import os
import urllib.parse
from sqlalchemy import create_engine
from langchain.sql_database import SQLDatabase
from langchain.agents.agent_toolkits import SQLDatabaseToolkit
from langchain.agents import create_sql_agent
from langchain_core.tools import Tool
from langchain_core.pydantic_v1 import BaseModel, Field

# Load environment variables
load_dotenv()

class Config:
    def __init__(self):
        # Elasticsearch config
        self.elastic_index_data_from = 0
        self.elastic_index_data_size = 10
        self.elastic_index_data_max_size = 50
        self.aggs_limit = 5
        self.max_search_retries = 3
        self.token_limit = 3000
        
        # Initialize Elasticsearch client
        self.es = Elasticsearch(
            os.getenv("ELASTIC_ENDPOINT"),
            api_key=os.getenv("ELASTIC_API_KEY"),
            verify_certs=False
        )
        
        # Initialize LLM
        self.llm = AzureChatOpenAI(
            api_key=os.getenv("AZURE_OPENAI_API_KEY"),
            azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
            deployment_name="gpt-4",
            model="gpt-4",
            temperature=0
        )
        
        # SQL Server connection setup
        driver = '{ODBC Driver 18 for SQL Server}'
        server = os.getenv("SQL_SERVER")
        database = os.getenv("SQL_DATABASE")
        user = os.getenv("SQL_USER")
        password = os.getenv("SQL_PASSWORD")
        
        conn = f"Driver={driver};Server=tcp:{server},1433;Database={database};Uid={user};Pwd={password};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
        params = urllib.parse.quote_plus(conn)
        conn_str = f'mssql+pyodbc:///?autocommit=true&odbc_connect={params}'
        engine = create_engine(conn_str, echo=True)
        self.sql_db = SQLDatabase(engine, schema="comp")
        
        self.langchain_verbose = True

cfg = Config()

# ================== Elasticsearch Tools ==================
# [Previous tool definitions remain exactly the same...]

# ================== Elasticsearch Agent ==================
def create_elastic_agent() -> AgentExecutor:
    prompt = ChatPromptTemplate.from_messages([
        SystemMessage(content="You are an Elasticsearch expert assistant"),
        ("user", "{input}"),
        MessagesPlaceholder(variable_name="agent_scratchpad")
    ])
    
    agent = create_openai_tools_agent(
        llm=cfg.llm,
        tools=elastic_tools,
        prompt=prompt
    )
    
    return AgentExecutor(
        agent=agent,
        tools=elastic_tools,
        verbose=cfg.langchain_verbose,
        handle_parsing_errors=True
    )

elastic_agent_executor = create_elastic_agent()

# ================== SQL Agent ==================
sql_toolkit = SQLDatabaseToolkit(db=cfg.sql_db, llm=cfg.llm)
sql_agent_executor = create_sql_agent(
    llm=cfg.llm,
    toolkit=sql_toolkit,
    verbose=cfg.langchain_verbose,
    handle_parsing_errors=True
)

# ================== State Definition ==================
class AgentState(dict):
    messages: list
    next_node: str = None

# ================== Multi-Agent Supervisor ==================
def supervisor(state: AgentState) -> AgentState:
    """Routes to appropriate agent based on user input"""
    try:
        if not state.get("messages"):
            return {"next_node": "END"}
        
        user_input = state["messages"][-1].content
        
        # Simple routing logic
        if any(keyword in user_input.lower() for keyword in ["elastic", "index", "search"]):
            return {"next_node": "elastic_agent"}
        elif any(keyword in user_input.lower() for keyword in ["sql", "database", "query"]):
            return {"next_node": "sql_agent"}
        else:
            return {"next_node": "END"}
    except Exception as e:
        print(f"Supervisor error: {str(e)}")
        return {"next_node": "END", "messages": [AIMessage(content=f"Error: {str(e)}")]}

# ================== Agent Nodes ==================
def elastic_agent(state: AgentState) -> AgentState:
    """Elasticsearch agent node"""
    try:
        if not state.get("messages"):
            return {"messages": []}
        
        user_input = state["messages"][-1].content
        result = elastic_agent_executor.invoke({"input": user_input})
        return {
            "messages": [AIMessage(content=result["output"])],
            "next_node": "supervisor"
        }
    except Exception as e:
        return {
            "messages": [AIMessage(content=f"Elasticsearch error: {str(e)}")],
            "next_node": "supervisor"
        }

def sql_agent(state: AgentState) -> AgentState:
    """SQL agent node"""
    try:
        if not state.get("messages"):
            return {"messages": []}
        
        user_input = state["messages"][-1].content
        result = sql_agent_executor.run(user_input)
        return {
            "messages": [AIMessage(content=str(result))],
            "next_node": "supervisor"
        }
    except Exception as e:
        return {
            "messages": [AIMessage(content=f"SQL error: {str(e)}")],
            "next_node": "supervisor"
        }

# ================== Build Graph ==================
builder = StateGraph(AgentState)

# Add nodes
builder.add_node("supervisor", supervisor)
builder.add_node("elastic_agent", elastic_agent)
builder.add_node("sql_agent", sql_agent)

# Set edges
builder.add_edge(START, "supervisor")
builder.add_edge("elastic_agent", "supervisor")
builder.add_edge("sql_agent", "supervisor")

# Set termination point
builder.add_edge("supervisor", END)

# Conditional edges
builder.add_conditional_edges(
    "supervisor",
    lambda state: state.get("next_node", "END"),
    {
        "elastic_agent": "elastic_agent",
        "sql_agent": "sql_agent",
        "END": END
    }
)

multi_agent = builder.compile()

# ================== Example Usage ==================
if __name__ == "__main__":
    test_queries = [
        "List all Elasticsearch indices",
        "How many customers do we have in the database?",
        "Show me sample documents from the logs index",
        "What are the top 5 products by sales?"
    ]
    
    for query in test_queries:
        print(f"\nUser: {query}")
        # Initialize state with the user message
        initial_state = AgentState({
            "messages": [HumanMessage(content=query)],
            "next_node": None
        })
        
        # Execute the agent
        result = multi_agent.invoke(initial_state)
        
        # Safely access the last message content
        if result.get("messages") and len(result["messages"]) > 0:
            print(f"Assistant: {result['messages'][-1].content}")
        else:
            print("Assistant: No response generated")
